import { Model } from 'sequelize-typescript';
import { Cart } from '../../cart/models/cart.model';
import { UsercreationAttrbs } from '../../core/interfaces/user.interfaces';
import { Role } from '../../roles/models/roles.model';
import { UserRefreshToken } from './user.refresh.token.model';
export declare class User extends Model<User, UsercreationAttrbs> {
    id: number;
    private name;
    private surname;
    phoneNumber: string;
    email: string;
    private resetToken;
    private resetTokenExpiration;
    private password;
    banned: boolean;
    banReason: string;
    private confirmCode;
    private isActivated;
    private country;
    private city;
    private postOffice;
    private isAdmin;
    private editWebSite;
    private addContent;
    private editContent;
    adminId: number;
    roles: Role[];
    private userRefreshToken;
    private carts;
    getName(): string;
    setName(name: string): string;
    getSurname(): string;
    setSurname(surname: string): string;
    getPassword(): string;
    setNewPasssword(password: string): string;
    getEmail(): string;
    getPhoneNumber(): string;
    getIsActivated(): boolean;
    setIsActivated(isActivated: boolean): boolean;
    getConfirmCode(): number;
    setConfirmCode(confirnCode: number): number;
    getResetToken(): string;
    setResetToken(resetToken: string): string;
    getResetTokenExpiration(): number;
    setResetTokenExpiration(resetTokenExpiration: number): number;
    getCity(): string;
    setCity(city: string): string;
    getCountry(): string;
    setCountry(country: string): string;
    getPostOffice(): string;
    setPostOffice(postOffice: string): string;
    getIsAdmin(): boolean;
    setIsAdmin(isAdmin: boolean): boolean;
    getEditWebSite(): boolean;
    setEditWebsite(editWebSite: boolean): boolean;
    getAddContent(): boolean;
    setAddContent(addContent: boolean): boolean;
    getEditContent(): boolean;
    setEditContent(editContent: boolean): boolean;
    getCarts(): Cart[];
    getUserRefreshToken(): UserRefreshToken;
}
