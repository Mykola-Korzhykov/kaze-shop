/// <reference types="node" />
import { Payload, CodeDto } from '../core/interfaces/auth.interfaces';
import { JwtService } from '@nestjs/jwt';
import { SignupDto } from './dto/signup.dto';
import { LoginDto } from './dto/login.dto';
import { NextFunction, Request, Response } from 'express';
import { MailService } from '../mail/mail.service';
import { AdminService } from '../admin/services/admin.service';
import { OwnerService } from '../owner/services/owner.service';
import { UserJwtRefreshTokenService } from '../users/services/jwt-refresh.service';
import { UsersService } from '../users/services/users.service';
import { OwnerJwtRefreshService } from '../owner/services/jwt-refresh.service';
import { AdminJwtRefreshService } from '../admin/services/jwt-refresh.service';
import { User } from '../users/models/user.model';
import { Owner } from '../owner/models/owner.model';
import { Admin } from '../admin/models/admin.model';
import { ResetDto } from './dto/reset.password.dto';
import { ChangeDto } from './dto/change.password.dto';
import { TasksService } from '../core/services/scedule.service';
export declare class AuthService {
    private readonly ownerJwtRefreshTokenService;
    private readonly adminJwtRefreshTokenService;
    private readonly ownerService;
    private readonly adminService;
    private readonly userService;
    private readonly mailService;
    private readonly sheduleService;
    private readonly jwtService;
    private readonly userJwtRefreshTokenService;
    private readonly Logger;
    constructor(ownerJwtRefreshTokenService: OwnerJwtRefreshService, adminJwtRefreshTokenService: AdminJwtRefreshService, ownerService: OwnerService, adminService: AdminService, userService: UsersService, mailService: MailService, sheduleService: TasksService, jwtService: JwtService, userJwtRefreshTokenService: UserJwtRefreshTokenService);
    login(userDto: LoginDto, response: Response, request: Request, next: NextFunction, userAgent: string): Promise<void | Response<any, Record<string, any>>>;
    signup(userDto: SignupDto, response: Response, request: Request, next: NextFunction, userAgent: string): Promise<void | Response<any, Record<string, any>>>;
    logout(response: Response, request: Request, next: NextFunction, type: 'OWNER' | 'ADMIN' | null): Promise<void | Response<any, Record<string, any>>>;
    refresh(response: Response, request: Request, next: NextFunction, type: 'OWNER' | 'ADMIN' | null, userAgent: string): Promise<void | Response<any, Record<string, any>>>;
    activate(request: Request, response: Response, next: NextFunction, activationLink: string, code: number, type: 'OWNER' | 'ADMIN', userAgent: string): Promise<void | Response<any, Record<string, any>>>;
    setCode(codeDto: CodeDto, locale: 'ua' | 'ru' | 'rs' | 'en'): Promise<string>;
    resetPassword(resetDto: ResetDto, codeDto: CodeDto): Promise<string | void>;
    changePassword(response: Response, request: Request, next: NextFunction, changeDto: ChangeDto, userId: number, type: 'OWNER' | 'ADMIN' | null): Promise<void | Response<any, Record<string, any>>>;
    validateAccessToken(token: string): Promise<Payload>;
    private generateConfirmCode;
    private generateAccessToken;
    private setResponse;
    private generateTokens;
    private refreshTokens;
    private authenticateUser;
    private validateRefreshToken;
    private generateEncryptedValue;
    private activateUser;
    private setIsActivated;
    setTimeouts(user: User | Admin | Owner, refreshToken: string, identifier: string): Promise<NodeJS.Timeout | void>;
}
